---
layout: nocomment-post
categories: [meta]
title: About
post_author: Paul Chiusano
---

Unison is a new programming language, currently under active development. It's a modern, statically-typed purely functional language, similar to Haskell, but with a unique ability to describe entire distributed systems with a single program. Here's a simple example:

```Haskell
-- comments start with `--`
-- alice : Node, bob : Node

x = factorial 6
Remote.at alice
  '( y = foo x -- happens on `alice` node
     Remote.at bob
       '( bar x y )) -- happens on `bob` node
```

The `Remote.at` function introduces a "remote effect", where computation may proceed on multiple Unison nodes:

* The `Remote.at alice` transfers control of the computation to the `alice` node.
* The `foo x` call happens on the `alice` node.
* Any required definitions (such as `foo` and `x`) will be dynamically deployed to the `alice` node and cached for future use.
* The `Remote.at bob` transfers control of the rest of the computation to the `bob` node.
* The `bar x y` computation happens on the `bob` node. Again, any needed definitions (`bar`, `x`, and `y`) will be dynamically deployed to the `bob` node.

This dynamic transfer / deployment of arbitrary computations is possible because definitions in Unison are identified by a cryptographic hash of their content, _including the hashes of all dependencies_ (the hash is also "nameless" as it isn't affected by naming of variables). To transfer a computation, we send it to the recipient, and the recipient checks to see if the computation references any unknown hashes. Any unknown hashes are synced to the recipient before the transfer completes and the computation proceeds.

If you'd like to learn more about the project, the talk [How to write a search engine in 15 lines of code](http://unisonweb.org/2016-10-12/search.html) has more of an introduction to the language.

